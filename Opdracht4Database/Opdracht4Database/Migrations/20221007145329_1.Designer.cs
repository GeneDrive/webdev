// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Opdracht4Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221007145329_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attracties");
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LaatstBezochteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gastForeignKey")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("gastForeignKey")
                        .IsUnique();

                    b.ToTable("GastInfo");
                });

            modelBuilder.Entity("Database.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gebruikers");
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("attractieId")
                        .HasColumnType("int");

                    b.Property<string>("probleem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("attractieId");

                    b.ToTable("Onderhoud");
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("attractieId")
                        .HasColumnType("int");

                    b.Property<int?>("gastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("attractieId");

                    b.HasIndex("gastId");

                    b.ToTable("Reserveringen");
                });

            modelBuilder.Entity("Medewerker_Coordineert", b =>
                {
                    b.Property<int>("coordinatorenId")
                        .HasColumnType("int");

                    b.Property<int>("coordineerdId")
                        .HasColumnType("int");

                    b.HasKey("coordinatorenId", "coordineerdId");

                    b.HasIndex("coordineerdId");

                    b.ToTable("Medewerker_Coordineert");
                });

            modelBuilder.Entity("Medewerker_Onderhouden", b =>
                {
                    b.Property<int>("onderhoudersId")
                        .HasColumnType("int");

                    b.Property<int>("onderhoudtId")
                        .HasColumnType("int");

                    b.HasKey("onderhoudersId", "onderhoudtId");

                    b.HasIndex("onderhoudtId");

                    b.ToTable("Medewerker_Onderhouden");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.Property<int?>("begeleidtId")
                        .HasColumnType("int");

                    b.Property<int>("credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("eersteBezoek")
                        .HasColumnType("datetime2");

                    b.Property<int?>("favorietId")
                        .HasColumnType("int");

                    b.Property<DateTime>("geboorteDatum")
                        .HasColumnType("datetime2");

                    b.HasIndex("begeleidtId");

                    b.HasIndex("favorietId");

                    b.ToTable("Gasten", (string)null);
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.ToTable("Medewerkers", (string)null);
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.HasOne("Database.Gast", "gast")
                        .WithOne("gastInfo")
                        .HasForeignKey("Database.GastInfo", "gastForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Coordinaat", "coordinaat", b1 =>
                        {
                            b1.Property<int>("GastInfoId")
                                .HasColumnType("int");

                            b1.Property<int>("X")
                                .HasColumnType("int");

                            b1.Property<int>("Y")
                                .HasColumnType("int");

                            b1.HasKey("GastInfoId");

                            b1.ToTable("GastInfo");

                            b1.WithOwner()
                                .HasForeignKey("GastInfoId");
                        });

                    b.Navigation("coordinaat")
                        .IsRequired();

                    b.Navigation("gast");
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.HasOne("Database.Attractie", "attractie")
                        .WithMany("onderhouds")
                        .HasForeignKey("attractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.DateTimeBereik", "dateTimeBereik", b1 =>
                        {
                            b1.Property<int>("OnderhoudId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("begin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("eind")
                                .HasColumnType("datetime2");

                            b1.HasKey("OnderhoudId");

                            b1.ToTable("Onderhoud");

                            b1.WithOwner()
                                .HasForeignKey("OnderhoudId");
                        });

                    b.Navigation("attractie");

                    b.Navigation("dateTimeBereik")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.HasOne("Database.Attractie", "attractie")
                        .WithMany("reserveringen")
                        .HasForeignKey("attractieId");

                    b.HasOne("Database.Gast", "gast")
                        .WithMany("reserveringen")
                        .HasForeignKey("gastId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Database.DateTimeBereik", "dateTimeBereik", b1 =>
                        {
                            b1.Property<int>("ReserveringId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("begin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("eind")
                                .HasColumnType("datetime2");

                            b1.HasKey("ReserveringId");

                            b1.ToTable("Reserveringen");

                            b1.WithOwner()
                                .HasForeignKey("ReserveringId");
                        });

                    b.Navigation("attractie");

                    b.Navigation("dateTimeBereik")
                        .IsRequired();

                    b.Navigation("gast");
                });

            modelBuilder.Entity("Medewerker_Coordineert", b =>
                {
                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("coordinatorenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("coordineerdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medewerker_Onderhouden", b =>
                {
                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("onderhoudersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("onderhoudtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Gast", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Database.Gast", "begeleidt")
                        .WithMany()
                        .HasForeignKey("begeleidtId");

                    b.HasOne("Database.Attractie", "favoriet")
                        .WithMany("favorieten")
                        .HasForeignKey("favorietId");

                    b.Navigation("begeleidt");

                    b.Navigation("favoriet");
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Medewerker", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Navigation("favorieten");

                    b.Navigation("onderhouds");

                    b.Navigation("reserveringen");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.Navigation("gastInfo")
                        .IsRequired();

                    b.Navigation("reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
