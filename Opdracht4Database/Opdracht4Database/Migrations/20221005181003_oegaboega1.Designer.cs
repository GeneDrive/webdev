// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Opdracht4Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221005181003_oegaboega1")]
    partial class oegaboega1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Attracties");
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("LaatstBezochteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GastInfo");
                });

            modelBuilder.Entity("Database.Gebruiker", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Gebruikers", (string)null);
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("attractieID")
                        .HasColumnType("int");

                    b.Property<string>("probleem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("attractieID");

                    b.ToTable("Onderhoud");
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("attractieID")
                        .HasColumnType("int");

                    b.Property<int?>("gastID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("attractieID");

                    b.HasIndex("gastID");

                    b.ToTable("Reserveringen");
                });

            modelBuilder.Entity("Medewerker_Coordineert", b =>
                {
                    b.Property<int>("coordinatorenID")
                        .HasColumnType("int");

                    b.Property<int>("coordineerdID")
                        .HasColumnType("int");

                    b.HasKey("coordinatorenID", "coordineerdID");

                    b.HasIndex("coordineerdID");

                    b.ToTable("Medewerker_Coordineert");
                });

            modelBuilder.Entity("Medewerker_Onderhouden", b =>
                {
                    b.Property<int>("onderhoudersID")
                        .HasColumnType("int");

                    b.Property<int>("onderhoudtID")
                        .HasColumnType("int");

                    b.HasKey("onderhoudersID", "onderhoudtID");

                    b.HasIndex("onderhoudtID");

                    b.ToTable("Medewerker_Onderhouden");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.Property<int?>("begeleidtID")
                        .HasColumnType("int");

                    b.Property<int>("credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("eersteBezoek")
                        .HasColumnType("datetime2");

                    b.Property<int?>("favorietID")
                        .HasColumnType("int");

                    b.Property<DateTime>("geboorteDatum")
                        .HasColumnType("datetime2");

                    b.HasIndex("begeleidtID");

                    b.HasIndex("favorietID");

                    b.ToTable("Gasten", (string)null);
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.ToTable("Medewerkers", (string)null);
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.OwnsOne("Database.Coordinaat", "coordinaat", b1 =>
                        {
                            b1.Property<int>("GastInfoID")
                                .HasColumnType("int");

                            b1.Property<int>("X")
                                .HasColumnType("int");

                            b1.Property<int>("Y")
                                .HasColumnType("int");

                            b1.HasKey("GastInfoID");

                            b1.ToTable("GastInfo");

                            b1.WithOwner()
                                .HasForeignKey("GastInfoID");
                        });

                    b.Navigation("coordinaat")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.HasOne("Database.Attractie", "attractie")
                        .WithMany("onderhouds")
                        .HasForeignKey("attractieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.DateTimeBereik", "dateTimeBereik", b1 =>
                        {
                            b1.Property<int>("OnderhoudID")
                                .HasColumnType("int");

                            b1.Property<DateTime>("begin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("eind")
                                .HasColumnType("datetime2");

                            b1.HasKey("OnderhoudID");

                            b1.ToTable("Onderhoud");

                            b1.WithOwner()
                                .HasForeignKey("OnderhoudID");
                        });

                    b.Navigation("attractie");

                    b.Navigation("dateTimeBereik")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.HasOne("Database.Attractie", "attractie")
                        .WithMany("reserveringen")
                        .HasForeignKey("attractieID");

                    b.HasOne("Database.Gast", "gast")
                        .WithMany("reserveringen")
                        .HasForeignKey("gastID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Database.DateTimeBereik", "dateTimeBereik", b1 =>
                        {
                            b1.Property<int>("ReserveringID")
                                .HasColumnType("int");

                            b1.Property<DateTime>("begin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("eind")
                                .HasColumnType("datetime2");

                            b1.HasKey("ReserveringID");

                            b1.ToTable("Reserveringen");

                            b1.WithOwner()
                                .HasForeignKey("ReserveringID");
                        });

                    b.Navigation("attractie");

                    b.Navigation("dateTimeBereik")
                        .IsRequired();

                    b.Navigation("gast");
                });

            modelBuilder.Entity("Medewerker_Coordineert", b =>
                {
                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("coordinatorenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("coordineerdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medewerker_Onderhouden", b =>
                {
                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("onderhoudersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("onderhoudtID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasOne("Database.GastInfo", "gastInfo")
                        .WithOne("gast")
                        .HasForeignKey("Database.Gast", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Gast", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Database.Gast", "begeleidt")
                        .WithMany()
                        .HasForeignKey("begeleidtID");

                    b.HasOne("Database.Attractie", "favoriet")
                        .WithMany("favorieten")
                        .HasForeignKey("favorietID");

                    b.Navigation("begeleidt");

                    b.Navigation("favoriet");

                    b.Navigation("gastInfo");
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Medewerker", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Navigation("favorieten");

                    b.Navigation("onderhouds");

                    b.Navigation("reserveringen");
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.Navigation("gast")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.Navigation("reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
